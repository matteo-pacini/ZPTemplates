// Generated using Sourcery 2.2.5 â€” https://github.com/krzysztofzablocki/Sourcery
// DO NOT EDIT

// swiftlint:disable all

import Foundation
import Combine

// MARK: - SomeService

extension SomeService {

    /// Combine wrapper for `simpleMethod` method, auto-generated by Sourcery.
    func simpleMethod() -> AnyPublisher<Int, Never> {
        Deferred {
            Future { promise in
                let result: Int = simpleMethod()
                promise(.success(result))
            }
        }
        .eraseToAnyPublisher()
    }


    /// Combine wrapper for `throwingMethod` method, auto-generated by Sourcery.
    func throwingMethod() -> AnyPublisher<String, any Error> {
        Deferred {
            Future { promise in
                do {
                    let result: String = try throwingMethod()
                    promise(.success(result))
                } catch {
                    promise(.failure(error))  
                }
            }
        }
        .eraseToAnyPublisher()
    }

    /// Combine wrapper for `throwingMethodWithRefinedError` method, auto-generated by Sourcery.
    func throwingMethodWithRefinedError() -> AnyPublisher<Void, SomeError> {
        Deferred {
            Future { promise in
                do {
                    let result: Void = try throwingMethodWithRefinedError()
                    promise(.success(result))
                } catch let error as SomeError {
                    promise(.failure(error))  
                } catch {
                    fatalError("Unknown error type propagated: \(String(describing: type(of: error)))")
                }
            }
        }
        .eraseToAnyPublisher()
    }

    /// Combine wrapper for `asyncThrowingMethod` method, auto-generated by Sourcery.
    func asyncThrowingMethod() -> AnyPublisher<Void, any Error> {
        Deferred {
            Future { promise in
                Task {
                    do {
                        let result: Void = try await asyncThrowingMethod()
                        promise(.success(result))
                    } catch {
                        promise(.failure(error))  
                    }
                }
            }
        }
        .eraseToAnyPublisher()
    }

    /// Combine wrapper for `asyncMethod` method, auto-generated by Sourcery.
    func asyncMethod() -> AnyPublisher<(Int, String), Never> {
        Deferred {
            Future { promise in
                Task {
                    let result: (Int, String) = await asyncMethod()
                    promise(.success(result))
                }
            }
        }
        .eraseToAnyPublisher()
    }

    /// Combine wrapper for `methodWithLabel` method, auto-generated by Sourcery.
    func methodWithLabel(a: Int, b: String) -> AnyPublisher<String, Never> {
        Deferred {
            Future { promise in
                let result: String = methodWithLabel(a: a, b: b)
                promise(.success(result))
            }
        }
        .eraseToAnyPublisher()
    }


    /// Combine wrapper for `methodWithNastyLabela` method, auto-generated by Sourcery.
    func methodWithNastyLabela(_ a: Int, with b: String) -> AnyPublisher<String, Never> {
        Deferred {
            Future { promise in
                let result: String = methodWithNastyLabela(a, with: b)
                promise(.success(result))
            }
        }
        .eraseToAnyPublisher()
    }


    /// Combine wrapper for `methodWithGenerics<T, U>` method, auto-generated by Sourcery.
    func methodWithGenerics<T, U>(a: T) -> AnyPublisher<U, Never> {
        Deferred {
            Future { promise in
                let result: U = methodWithGenerics(a: a)
                promise(.success(result))
            }
        }
        .eraseToAnyPublisher()
    }


    /// Combine wrapper for `methodWithGenericsWhereClause<T>` method, auto-generated by Sourcery.
    func methodWithGenericsWhereClause<T>(a: Int) -> AnyPublisher<T, Never> where T: Equatable {
        Deferred {
            Future { promise in
                let result: T = methodWithGenericsWhereClause(a: a)
                promise(.success(result))
            }
        }
        .eraseToAnyPublisher()
    }


}

// swiftlint:enable all